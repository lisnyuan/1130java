<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--spring和mybatis的整合文件，主要包括：
        1 配置数据库连接池 基本4项
            1.1 用户名
            1.2 登陆密码
            1.3 驱动类
            1.4 数据库的url
        2 配置sqlSessionFactory的相关属性 class= sqlSessionFactoryBean id=sqlSessionFactory
            2.1 对pojo对象起别名，typeAliases，value=全类名
            2.2 配置数据连接池，引用上面的配置文件即可，注意是引用ref，不是value
            2.3 指定mybatis配置文件的位置，configLocation, 方便加载到spring中
        3 批量扫描接口，在容器中生成每个接口的对象，使用的是MapperScannerConfigurer类，配置属性
            name="basePackage"，指定接口所在的包，value为接口所在的包
-->

<!--    1 配置数据库连接池-->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <property name="username" value="root"/>
        <property name="password" value="root"/>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/meinian?characterEncoding=utf8"/>
    </bean>
<!--    2 spring和mybatis整合的工厂 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
<!--        2.1 配置数据连接池-->
        <property name="dataSource" ref="dataSource"/>
<!--        2.2 批量配置别名，在设置result类型的时候不必写全类名-->
        <property name="typeAliasesPackage" value="com.feizuo.pojo"/>
<!--        2.3 将mybatis的配置文件加载到spring容器中-->
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
    </bean>
<!--    3 批量扫描生成接口对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        3.1 指定接口的所在的包-->
        <property name="basePackage" value="com.feizuo.dao"/>
    </bean>
</beans>